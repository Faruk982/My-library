/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import org.json.*;
/**
 *
 * @author Taufiq
 */
public class BookListApp extends javax.swing.JFrame {

    /**
     * Creates new form BookListApp
     */
    public String email;
    private DefaultListModel<String> writerListModel;
    public BookListApp() {
        initComponents();
        writerListModel = new DefaultListModel<>();
        fetchAndDisplayWriters();
    }
        public BookListApp(String ee) {
        initComponents();email=ee;
        writerListModel = new DefaultListModel<>();
        fetchAndDisplayWriters();
    }
private void fetchAndDisplayWriters() {
        try {
            URL url = new URL("https://api.myjson.online/v1/records/9e9a760f-592c-4abb-a23d-f496468d3ad0");
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("GET");

            BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();
            writerListModel = new DefaultListModel<>();
            JSONObject jsonObject = new JSONObject(response.toString());
            JSONObject jsonObject1=jsonObject.getJSONObject("data");
            JSONArray data = jsonObject1.getJSONArray("data");
            for (int i = 0; i < data.length(); i++) {
                JSONObject writer = data.getJSONObject(i);
                String writerName = writer.getString("writername");
             //   System.out.println(writerName);
                writerListModel.addElement(writerName);
            }
             writerList.setModel(writerListModel); 
        } catch (IOException | JSONException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching data from the server.");
        }
    }
 
private void displayBooksForWriter(String writerName) {
        try {
            URL url = new URL("https://api.myjson.online/v1/records/9e9a760f-592c-4abb-a23d-f496468d3ad0");
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("GET");

            BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();

            JSONObject jsonObject = new JSONObject(response.toString());
            JSONObject jsonObject1=jsonObject.getJSONObject("data");
            JSONArray data = jsonObject1.getJSONArray("data");
            for (int i = 0; i < data.length(); i++) {
                JSONObject writer = data.getJSONObject(i);
                if (writer.getString("writername").equals(writerName)) {
                    JSONArray booksArray = writer.getJSONArray("books");
                    StringBuilder booksInfo = new StringBuilder();
                    for (int j = 0; j < booksArray.length(); j++) {
                        JSONObject book = booksArray.getJSONObject(j);
                        String bookName = book.getString("booksname");
                        String type = book.getString("type");
                        String publishedDate = book.getString("publishedDate");
                        booksInfo.append("Book Name: ").append(bookName)
                                .append(", Type: ").append(type)
                                .append(", Published Date: ").append(publishedDate)
                                .append("\n");
                    }
                    String textArea = new String(booksInfo.toString());
                    JOptionPane.showMessageDialog(this, textArea, "Books by " + writerName, JOptionPane.PLAIN_MESSAGE);
                }
            }
        } catch (IOException | JSONException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching books for the writer.");
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        writerList = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("some famous writers and their books");

        jPanel1.setBackground(new java.awt.Color(0, 204, 51));

        writerList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        writerList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        writerList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                writerListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(writerList);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 191, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(293, 293, 293))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void writerListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_writerListValueChanged
        // TODO add your handling code here:
        if (!evt.getValueIsAdjusting()) {
                    String selectedWriter = writerList.getSelectedValue();
                    if (selectedWriter != null) {
                        displayBooksForWriter(selectedWriter);
                    }
                }
    }//GEN-LAST:event_writerListValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       BOOK homeFrame = new BOOK(email);
            homeFrame.setVisible(true);
            homeFrame.pack();
            homeFrame.setLocationRelativeTo(null);
            dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookListApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookListApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookListApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookListApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookListApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> writerList;
    // End of variables declaration//GEN-END:variables
}
